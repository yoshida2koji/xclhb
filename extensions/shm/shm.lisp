(defpackage :xclhb-shm
  (:use :cl :struct+ :xclhb)
  (:shadowing-import-from
   :xclhb
   :atom :byte :char :format)
  (:local-nicknames (:x :xclhb)))

(in-package :xclhb-shm)

(defglobal +extension-name+ "MIT-SHM")

(export 'seg)
(deftype seg () 'xid)

(export 'completion-event-code)
(defun completion-event-code (client)
  (extension-event-base client +extension-name+))

(defstruct+ completion-event ()
  (drawable 0 :type drawable)
  (minor-event 0 :type card16)
  (major-event 0 :type byte)
  (shmseg 0 :type seg)
  (offset 0 :type card32))


(defun read-completion-event (buffer offset)
  (let ((str (make-completion-event)))
    (with-completion-event (drawable minor-event major-event shmseg (%offset offset)) str
      (offset-inc offset 1)
      (setf drawable (read-card32 buffer (offset-get offset)))
      (offset-inc offset 4)
      (setf minor-event (read-card16 buffer (offset-get offset)))
      (offset-inc offset 2)
      (setf major-event (read-card8 buffer (offset-get offset)))
      (offset-inc offset 1) (offset-inc offset 1)
      (setf shmseg (read-card32 buffer (offset-get offset)))
      (offset-inc offset 4)
      (setf %offset (read-card32 buffer (offset-get offset)))
      (offset-inc offset 4))
    str))

(export 'query-version)
(defun query-version (client callback)
  (let* ((request-length 4)
         (buffer (client-output-buffer client))
         (major-opcode (extension-major-opcode client +extension-name+)))
    (write-card8 buffer 0 major-opcode)
    (write-card8 buffer 1 0)
    (write-card16 buffer 2 1)
    (write-sequence buffer (client-stream client) :end request-length)
    (let ((seq-no (client-request-sequence-number client)))
      (push (cons seq-no (make-reply-collback :major-opcode major-opcode
                                              :minor-opcode 0
                                              :fn callback))
            (client-request-reply-callback-table client))
      (setf (client-request-sequence-number client) (+ seq-no 1))
      seq-no)))

(defstruct+ query-version-reply ()
  (shared-pixmaps 0 :type bool)
  (major-version 0 :type card16)
  (minor-version 0 :type card16)
  (uid 0 :type card16)
  (gid 0 :type card16)
  (pixmap-format 0 :type card8))

(defun read-query-version-reply (buffer offset length)
  (declare (ignorable length))
  (let ((str (make-query-version-reply)))
    (with-query-version-reply
        (shared-pixmaps major-version minor-version uid gid pixmap-format) str
      (setf shared-pixmaps (read-card8 buffer (offset-get offset)))
      (offset-inc offset 1)
      (offset-inc offset 6)
      (setf major-version (read-card16 buffer (offset-get offset)))
      (offset-inc offset 2)
      (setf minor-version (read-card16 buffer (offset-get offset)))
      (offset-inc offset 2)
      (setf uid (read-card16 buffer (offset-get offset)))
      (offset-inc offset 2)
      (setf gid (read-card16 buffer (offset-get offset)))
      (offset-inc offset 2)
      (setf pixmap-format (read-card8 buffer (offset-get offset))))
    str))


(export 'x-attach)
(defun x-attach (client shmseg shmid read-only)
  (let* ((request-length 16)
         (buffer (client-output-buffer client)))
    (write-card8 buffer 0 (extension-major-opcode client +extension-name+))
    (write-card8 buffer 1 1)
    (write-card16 buffer 2 4)
    (write-card32 buffer 4 shmseg)
    (write-card32 buffer 8 shmid)
    (write-card8 buffer 12 read-only)
    (write-sequence buffer (client-stream client) :end request-length)
    (let ((seq-no (client-request-sequence-number client)))
      (setf (client-request-sequence-number client) (+ seq-no 1))
      seq-no)))

(export 'x-detach)
(defun x-detach (client shmseg)
  (let* ((request-length 8)
         (buffer (client-output-buffer client)))
    (write-card8 buffer 0 (extension-major-opcode client +extension-name+))
    (write-card8 buffer 1 2)
    (write-card16 buffer 2 2)
    (write-card32 buffer 4 shmseg)
    (write-sequence buffer (client-stream client) :end request-length)
    (let ((seq-no (client-request-sequence-number client)))
      (setf (client-request-sequence-number client) (+ seq-no 1))
      seq-no)))

(export 'shm-put-image)
(defun shm-put-image (client drawable gc total-width total-height src-x src-y src-width
                      src-height dst-x dst-y depth format send-event shmseg offset)
  (let* ((request-length 40)
         (buffer (client-output-buffer client)))
    (write-card8 buffer 0 (extension-major-opcode client +extension-name+))
    (write-card8 buffer 1 3)
    (write-card16 buffer 2 10)
    (write-card32 buffer 4 drawable)
    (write-card32 buffer 8 gc)
    (write-card16 buffer 12 total-width)
    (write-card16 buffer 14 total-height)
    (write-card16 buffer 16 src-x)
    (write-card16 buffer 18 src-y)
    (write-card16 buffer 20 src-width)
    (write-card16 buffer 22 src-height)
    (write-int16 buffer 24 dst-x)
    (write-int16 buffer 26 dst-y)
    (write-card8 buffer 28 depth)
    (write-card8 buffer 29 format)
    (write-card8 buffer 30 send-event)
    (write-card32 buffer 32 shmseg)
    (write-card32 buffer 36 offset)
    (write-sequence buffer (client-stream client) :end request-length)
    (let ((seq-no (client-request-sequence-number client)))
      (setf (client-request-sequence-number client) (+ seq-no 1))
      seq-no)))

(export 'shm-get-image)
(defun shm-get-image (client callback drawable x y width height plane-mask format shmseg offset)
  (let* ((request-length 32)
         (buffer (client-output-buffer client))
         (major-opcode (extension-major-opcode client +extension-name+)))
    (write-card8 buffer 0 major-opcode)
    (write-card8 buffer 1 4)
    (write-card16 buffer 2 8)
    (write-card32 buffer 4 drawable)
    (write-int16 buffer 8 x)
    (write-int16 buffer 10 y)
    (write-card16 buffer 12 width)
    (write-card16 buffer 14 height)
    (write-card32 buffer 16 plane-mask)
    (write-card8 buffer 20 format)
    (write-card32 buffer 24 shmseg)
    (write-card32 buffer 28 offset)
    (write-sequence buffer (client-stream client) :end request-length)
    (let ((seq-no (client-request-sequence-number client)))
      (push (cons seq-no (make-reply-collback :major-opcode major-opcode
                                              :minor-opcode 4
                                              :fn callback))
            (client-request-reply-callback-table client))
      (setf (client-request-sequence-number client) (+ seq-no 1))
      seq-no)))

(defstruct+ shm-get-image-reply ()
  (depth 0 :type card8)
  (visual 0 :type visualid)
  (size 0 :type card32))

(defun read-shm-get-image-reply (buffer offset length)
  (declare (ignorable length))
  (let ((str (make-shm-get-image-reply)))
    (with-shm-get-image-reply (depth visual size)
        str
      (setf depth (read-card8 buffer (offset-get offset)))
      (offset-inc offset 1)
      (offset-inc offset 6)
      (setf visual (read-card32 buffer (offset-get offset)))
      (offset-inc offset 4)
      (setf size (read-card32 buffer (offset-get offset)))
      (offset-inc offset 4))
    str))

(export 'shm-create-pixmap)
(defun shm-create-pixmap (client pid drawable width height depth shmseg offset)
  (let* ((request-length 28)
         (buffer (client-output-buffer client)))
    (write-card8 buffer 0 (extension-major-opcode client +extension-name+))
    (write-card8 buffer 1 5)
    (write-card16 buffer 2 7)
    (write-card32 buffer 4 pid)
    (write-card32 buffer 8 drawable)
    (write-card16 buffer 12 width)
    (write-card16 buffer 14 height)
    (write-card8 buffer 16 depth)
    (write-card32 buffer 20 shmseg)
    (write-card32 buffer 24 offset)
    (write-sequence buffer (client-stream client) :end request-length)
    (let ((seq-no (client-request-sequence-number client)))
      (setf (client-request-sequence-number client) (+ seq-no 1))
      seq-no)))


(export 'init)
(defun init (client)
  (x:init-extension client +extension-name+)
  (setf (aref x::*read-event-functions* (completion-event-code client)) #'read-completion-event)
  (setf (aref x::*error-names* (x:extension-error-base client +extension-name+)) "bad-seg")
  (let ((major-opcode (x:extension-major-opcode client +extension-name+))
        (readers (make-array 8 :initial-element nil)))
    (setf (aref readers 0) #'read-query-version-reply)
    (setf (aref readers 4) #'read-shm-get-image-reply)
    (setf (aref x::*read-reply-functions* major-opcode) readers)))

(cffi:defcfun "shmget" :int
  (key :int)
  (size :long)
  (flags :int))

(cffi:defcfun "shmat" :pointer
  (segment-id :int)
  (segment-pointer :pointer)
  (flags :int))

(cffi:defcfun "shmdt" :int
  (segment-pointer :pointer))

(cffi:defcfun "shmctl" :int
  (segment-id :int)
  (command :int)
  (shmid-ds :pointer))

(export '(shm-segment shm-segment-id shm-segment-size shm-segment-data))
(defstruct (shm-segment (:constructor make-shm-segment%))
  (id 0 :type (integer 0) :read-only t)
  (size 0 :type (integer 0) :read-only t)
  (data nil :type cffi:foreign-pointer :read-only t))

(defun get-segment-id (size)
  "when error, return -1"
  (shmget 0 size #o1777))

(defun attach (segment-id)
  "return foreign pointer. when error, return -1"
  (shmat segment-id (cffi:null-pointer) 0))

(defun attach-fail-p (pointer)
  (let ((addr (cffi:pointer-address pointer)))
    (dotimes (i (integer-length addr))
      (unless (logbitp i addr)
        (return-from attach-fail-p nil)))
    t))

(defun detach (segment-pointer)
  (shmdt segment-pointer))

(defun free (segment-id)
  (shmctl segment-id 0 (cffi:null-pointer)))

(export 'make-shm-segment)
(defun make-shm-segment (size)
  (let ((id (get-segment-id size)))
    (when (= id -1)
      (error "failed to shmget"))
    (let ((pointer (attach id)))
      (when (attach-fail-p pointer)
        (error "failed to shmat"))
      (let ((segment (make-shm-segment% :id id :size size :data pointer)))
        (tg:finalize segment (lambda ()
                               (detach pointer)
                               (free id)))
        segment))))

(export 'free-shm-segment)
(defun free-shm-segment (segment)
  (detach (shm-segment-data segment))
  (free (shm-segment-id segment))
  (values))
